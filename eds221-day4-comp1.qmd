---
title: "eds221-day4-comp1"
format: html
editor: visual
execute: 
  warning: false
---

```{r}
library(tidyverse)
library(palmerpenguins)
```



## Functions

### Make a function that doubles a value.

```{r}
double_value <- function(my_dollars) {
  print(2 * my_dollars)
  #can also code as 2 * my_dollars (do not need the print statement) but this is storing it as well
}
```

```{r}
double_value(10.13)
```

```{r}
double_value(my_dollars = 10.13, 5)

monthly_income <- c(13, 15, 16, 18)
```

### Create a function that returns an awesome restaurant name given a cool animal and your favorite food

```{r}
name_restaurant <- function(animal, food) {
  print(paste0(animal, food))
}

name_restaurant(animal = "hawk", food = "pizza")
```

Given temperature in degrees fahrenheit, write a function that converts it to Celsius

```{r}
convert_F_to_C <- function(fahrenheit) {
  x <- ((fahrenheit - 32) * (5/9))
  print(x)
}

convert_F_to_C(52)
```

### Create a function that given inputs of age and hometown, returns "I am \_\_ years old and I'm from \_\_"

```{r}
age_hometowm <- function(age_yr, hometown) {
  y <- paste("I am", age, "years old and I'm from", hometown)
  print(y)
}

age_hometowm(33, "Miami")
```

## print statement: show me this

## return statement: store and save so i can use later

# Functions with conditionals

```{r}
calculate_animal_age <- function(species, age_human_years) {
  if(species == "dog") {
    age_human_years *7
  } else if(species == "goat") {
    age_human_years * 4.7
  } else {(print("not dog or goat"))
  }
}
calculate_animal_age("dog", 15)
calculate_animal_age("goat", 20)
calculate_animal_age("whale", 10)
#remember {} is used to house the executable code, meaning it does the calculations or whatever you want it to do
```

### Write a function that, given temperature in Kelvin, if a user selects "metric" to the scale then return degrees Celsius, or if they select "english" then return degrees in Fahrenheit.

```{r}
convert_kelvin <- function(scale, temp_k) {
  if(scale == "metric") {
    a <- temp_k - 273.15
    print(a)
  } else if(scale == "english") {
    b <- ((temp_k - 273.15) *1.8) + 32
    print(b)
  }
}

convert_kelvin(scale = "metric", temp_k = 50)
```

### Write a function that, given money, if a user selects "USA" to the scale then return dollars, or if they select "England" then return pounds.

```{r}
convert_money <- function(money, amount)
if(money == "USA") {
  usa_money <- amount * 2
  print(usa_money)
} else if (money == "England") {
  england_money <- amount * 2.5
  print(england_money)
}

convert_money("USA", 34)
```

# More functions

### Create a subset within a function, and then return something based on that subset.

```{r}
dog_choice <- data.frame(dog_name = c("Khora", "Teddy", "Waffle", "Banjo", "Tallie"), 
                         food = c("everything", "salmon", "pancakes", "chicken", "enchiladas"))

```

```{r}
#we made a function and subsetted the dog_choice dataframe
dog_menu <- function(enter_dog_name) {
  my_subset<- dplyr::filter(dog_choice, dog_name == enter_dog_name)
  print(paste("My name is", my_subset$dog_name, "and my favorite food is", my_subset$food))
}
dog_menu(enter_dog_name = "Banjo")
```

# Function with a for loop
```{r}

df_means <- function(df) {
  for(i in seq_along(df)) {
    col_mean <- mean(df[[i]], na.rm = TRUE)
    column_name <- colnames(df[i])
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}
```

```{r}
df_means(df = penguins)
```

### Create a function to calculate the Betz Limit:

### Air density: kg/m^3

### Power: watts
```{r}
calculate_betz_windpower <- function(air_density, 
                                     rotor_radius, 
                                     wind_velocity) {
  if(wind_velocity > 130) {
    warning("hey! take a look cause thats pretty fast")
  }
  if(rotor_radius < 0) {
    stop("Rotor Radius must be a positive value in meters.")
  }
  0.3 * air_density * pi  * ((rotor_radius) ^ 2) * (wind_velocity ^ 3)
}
```

```{r}
calculate_betz_windpower(air_density = 1.2, rotor_radius =  30, wind_velocity = 50)
```

```{r}
calculate_betz_windpower(air_density = 1.2, rotor_radius =  15, wind_velocity = 150)
```



